
#include <string>
#include <iostream>

#ifndef BOOST_FILESYSTEM_VERSION
#define BOOST_FILESYSTEM_VERSION 3
#endif
#include <boost/filesystem.hpp>
#include <boost/iostreams/stream.hpp>
#include <boost/iostreams/device/null.hpp>

#include "babb/utils/memory.h"
#include "babb/utils/utils.h"

#include "bcplus/Configuration.h"

namespace ios = boost::iostreams;
namespace fs = boost::filesystem;

namespace bcplus {

const size_t Configuration::DEFAULT_VERB_LEVEL = Verb::STD;

Configuration::Configuration(char const* bin, char const* version)
{ 
	_verb = DEFAULT_VERB_LEVEL;
	_version = new ReferencedString(version);
	_bin_name = new ReferencedString(fs::path(bin).filename().native());
	_parse_trace = false;
}


Configuration::~Configuration()
{ /* Intentionally left blank */ }


Option::Status Configuration::load(int argc, char const** argv) {
	Option::Status ret = Option::STAT_OK;
	char const* val;
	int int_v;
	bool good;

	// Figure out who we are
	fs::path bin = argv[0];
	_bin_name = new ReferencedString(bin.filename().native());

	// parse arguments

	for (int i = 1; i < argc; i++) {
		val = NULL;

		Option::type opt = parseOption(argv[i], val);

		switch (opt) {
		case Option::SYMTAB_INPUT:
			if (fs::native(val)) {
				_symtab_in = new ReferencedPath(val);
			} else {
				ret = Option::STAT_BAD_ARG;
				std::cerr << "ERROR: \"" << val << "\" is not a valid file path." << std::endl;
			}
			break;
		case Option::SYMTAB_OUTPUT:
			if (fs::native(val)) {
				_symtab_out = new ReferencedPath(val);
			} else {
				ret = Option::STAT_BAD_ARG;
				std::cerr << "ERROR: \"" << val << "\" is not a valid file path." << std::endl;

			}
			break;

		case Option::VERBOSITY:
			good = babb::utils::fromString(val, int_v);
			if (!good || int_v < 0) {
				ret = Option::STAT_BAD_ARG;
				std::cerr << "ERROR: unknown valud provided for command line option. Expected a non-negative integer in \"" << opt <<"." << std::endl;
			} else {
				verbosity(int_v);	
			}
			break;
		case Option::PARSE_TRACE:
			if (!strcmp(val, "true")) {
				_parse_trace = true;
			} else if (!strcmp(val, "false")) {
				_parse_trace = false;
			} else {
				ret = Option::STAT_BAD_ARG;
				std::cerr << "ERROR: unknown valud provided for command line option. Expected \"true\" or \"false\" in \"" << opt <<"." << std::endl;
			}
			break;

		case Option::HELP:
			return Option::STAT_HELP;

		case Option::VERSION:
			return Option::STAT_VERSION;

		case Option::BAD:			
		default:
			ret = Option::STAT_BAD_ARG;
			std::cerr << "ERROR: Unrecognized option: \"" << argv[i] << "\"." << std::endl;
			break;
		}

	}
	return ret;
}

bool Configuration::good() {
	bool good = true;
	// TODO
	return good;
}

std::ostream& Configuration::ostream(Verb::Level v) const {
	static ios::stream<ios::null_sink> NULLSTREAM( (ios::null_sink()) );

	if (v > _verb) return NULLSTREAM;
	else if (v == Verb::ERROR || v == Verb::WARN) return std::cerr;
#ifdef NDEBUG
	else if (v > Verb::STD) return NULLSTREAM;
#endif
	else return std::cout;
}

Option::type Configuration::parseOption(char const* opt, char const*& val) {
    char const* marker;

    val = NULL;

    /*!re2c
     	re2c:define:YYCTYPE = "char";
     	re2c:define:YYCURSOR = opt;
     	re2c:yyfill:enable = 0;
    	re2c:define:YYMARKER = marker;
    	re2c:indent:top = 1;
	
		"-s="|"--symtab-in="					{ val = opt; return Option::SYMTAB_INPUT; }
		"--symtab-out="							{ val = opt; return Option::SYMTAB_OUTPUT; }
		"--verb="								{ val = opt; return Option::VERBOSITY; }
		"--parse-trace="						{ val = opt; return Option::PARSE_TRACE; }
		"--parse-trace"							{ val = "true"; return Option::PARSE_TRACE; }
		"-h"|"-?"|"--help"						{ val = NULL; return Option::HELP; }
		"-v"|"--version"						{ val = NULL; return Option::VERSION; }
		.										{ val = NULL; return Option::BAD; }
	*/

}




std::ostream& Configuration::output(std::ostream& out) const {
	out 
		<< "Executable name: " << *_bin_name << std::endl
		<< "Version: " << *_version << std::endl << std::endl
		<< "Symbol Table Input: \"" << (_symtab_in ? _symtab_in->native() : "<NONE>") << "\"" << std::endl
		<< "Symbol Table Output: \"" << (_symtab_out ? _symtab_out->native() : "<NONE>") << "\"" << std::endl
		<< "Verbosity: " << "\"" << _verb << "\"" << std::endl;

	return out;
}

std::ostream& Configuration::outputVersion(std::ostream& out) const {
	out << binaryName() << " version " << *version() << std::endl;
	return out;
}

std::ostream& Configuration::outputHelp(std::ostream& out) const {
	out << "---------------------------------------------------------------------------------------"<< std::endl
		<< *binaryName() << " version " << *version() 												<< std::endl
		<< "---------------------------------------------------------------------------------------"<< std::endl
		<< "Usage: " << *binaryName() << " <OPTIONS> <INPUT_FILES>" 								<< std::endl
		<< "          -s=<FILE>"																	<< std::endl
		<< "          --symtab-in=<FILE>"															<< std::endl
		<< "                   - An XML file to read the initial symbol table in from. [none]"		<< std::endl
		<< "          --symtab-out=<FILE>"															<< std::endl
		<< "                   - A file to write the final symbol table to. [none]"					<< std::endl
		<< "          --verb=<LEVEL>"																<< std::endl
		<< "                   - The level of output to show:"										<< std::endl
		<< "                        " << Verb::ERROR 		<< "  - Error output only"				<< std::endl
		<< "                        " << Verb::WARN 		<< "  - Warnings"						<< std::endl
		<< "                        " << Verb::STD	 		<< "  - Standard messages [default]"	<< std::endl
		<< "                     Only available when compiled in debug mode:"						<< std::endl
		<< "                        " << Verb::OP 			<< "  - Operation level trace output" 	<< std::endl
		<< "                        " << Verb::DETAIL	 	<< "  - Detailed debugging messages"	<< std::endl
		<< "                        " << Verb::TRACE_PARSER	<< "+ - Parser debugging messages"		<< std::endl
		<< "          --parse-trace"																<< std::endl
		<< "                   - Enable lemon parser trace output."									<< std::endl
		<< "          -v"																			<< std::endl
		<< "          --version"																	<< std::endl
		<< "                   - Displays the version dialog."										<< std::endl
		<< "          -h"																			<< std::endl
		<< "          --help"																		<< std::endl
		<< "                   - Shows this dialog."												<< std::endl;
	return out;
}

};
