
#include <sstream>

#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>

#include "bcplus/parser/detail/Scanner.h"
#include "bcplus/parser/detail/lemon_parser.h"

#include "bcplus/Location.h"
#include "bcplus/parser/Token.h"

#include "bcplus/parser/detail/ScannerSource.h"
#include "bcplus/parser/detail/ScannerRawSource.h"
#include "bcplus/parser/detail/ScannerTokenSource.h"
#include "bcplus/parser/detail/ScannerFileSource.h"
#include "bcplus/parser/detail/ScannerBufferSource.h"

namespace u = babb::utils; 
namespace fs = boost::filesystem;

namespace bcplus {
namespace parser {
namespace detail {

Scanner::Scanner(Configuration const* config)
	: _cond(yycNORMAL), _config(config), _in_macro(false) {
	// Intentionally left blank
}

Scanner::~Scanner() {
	// Intentionally left blank
}

bool Scanner::push_front(fs::path const& file, bool squelch) {
	u::ref_ptr<ScannerFileSource> src = new ScannerFileSource(_config, file, squelch);
	if (!src->good()) return false;
	_sources.push_front(src.get());
	return true;
}

bool Scanner::push_back(fs::path const& file, bool squelch) {
	u::ref_ptr<ScannerFileSource> src = new ScannerFileSource(_config, file, squelch);
	if (!src->good()) return false;
	_sources.push_back(src.get());
	return true;
}

void Scanner::push_front(char const* buffer, Location const& loc, bool track_position) {
	u::ref_ptr<ScannerBufferSource> src = new ScannerBufferSource(_config, buffer, loc, track_position);
	_sources.push_front(src.get());
}

void Scanner::push_back(char const* buffer, Location const& loc, bool track_position) {
	u::ref_ptr<ScannerBufferSource> src = new ScannerBufferSource(_config, buffer, loc, track_position);
	_sources.push_back(src.get());
}

void Scanner::push_back(Token* token) {
	if (!_sources.size() || _sources.back()->type() != ScannerSource::Type::TOKENS) {
		_sources.push_back(new ScannerTokenSource(token));
	} else ((ScannerTokenSource*)_sources.back().get())->push_back(token);
}

void Scanner::push_front(Token* token) {
	if (!_sources.size() || _sources.front()->type() != ScannerSource::Type::TOKENS) {
		_sources.push_front(new ScannerTokenSource(token));
	} else ((ScannerTokenSource*)_sources.front().get())->push_front(token);
}

void Scanner::push_back(TokenList* tokens) {
	if (!_sources.size() || _sources.back()->type() != ScannerSource::Type::TOKENS) {
		_sources.push_back(new ScannerTokenSource(tokens));
	} else ((ScannerTokenSource*)_sources.back().get())->push_back(tokens);
}

void Scanner::push_front(TokenList* tokens) {
	if (!_sources.size() || _sources.front()->type() != ScannerSource::Type::TOKENS) {
		_sources.push_front(new ScannerTokenSource(tokens));
	} else ((ScannerTokenSource*)_sources.front().get())->push_front(tokens);
}


Token* Scanner::readToken() {
	u::ref_ptr<Token> token = NULL;
	if (!size()) {
		Location l = loc();
		token  = new Token(T_EOF, new ReferencedString("<EOF>"), l, l);
	} else {
		do {
			ScannerSource* src = _sources.front();
#ifndef NDEBUG
			_config->ostream(Verb::TRACE_SCANNER) << "TRACE: " << size() << " sources, reading from \"" 
				<< (src->loc().file() ? src->loc().file()->native() : std::string("<NULL>")) << "\"." << std::endl;
#endif
			switch(src->type()) {
			case ScannerSource::Type::RAW:
				token = tokenize((ScannerRawSource*)src);
				break;
			case ScannerSource::Type::TOKENS:
				token = ((ScannerTokenSource*)src)->next();
				break;
			}
	
			if (!token || token->type() == T_ERR_IO) {
#ifndef NDEBUG
				_config->ostream(Verb::TRACE_SCANNER) << "TRACE: Scanner encountered IO error." << std::endl;
#endif
				_sources.pop_front();
			} else if (token->type() == T_EOF) {
#ifndef NDEBUG
				_config->ostream(Verb::TRACE_SCANNER) << "TRACE: Scanner encountered end of input source." << std::endl;
#endif
				_sources.pop_front();
			}
		} while (token && token->type() == T_EOF && size());
	}
	
	if (!token) {
		Location l = loc();
#ifndef NDEBUG
		_config->ostream(Verb::TRACE_SCANNER) << "TRACE: Scanner got a null token." << std::endl;
#endif
		token  = new Token(T_ERR_IO, new ReferencedString("<IO ERROR>"), l, l);
	}

#ifndef NDEBUG
	_config->ostream(Verb::TRACE_SCANNER) << "TRACE: " << token->beginLoc() << ": (" << token->typeString() << "): \"" << *token << "\": Read from scanner." << std::endl;
#endif

	return token.release();
}


Token* Scanner::tokenize(ScannerRawSource* source) {
	if (source->eof()) return new Token(T_EOF, new ReferencedString("<EOF>"), source->loc(), source->loc());
	else if (!source->good()) return new Token(T_ERR_IO, new ReferencedString("<IO ERROR>"), source->loc(), source->loc());


	int ret;
	Location begin;
	char const* marker;

re2c_start:
	marker = source->token() = source->cursor();
	begin = source->loc();

	if (_cond == yycNORMAL) {
			/*!re2c
				
				re2c:define:YYCTYPE						= char;
				re2c:define:YYMARKER					= source->marker();
				re2c:define:YYCURSOR					= source->cursor();
				re2c:define:YYLIMIT						= source->limit();
				re2c:define:YYGETCONDITION				= _cond;
				re2c:define:YYGETCONDITION:naked		= 1;
				re2c:define:YYFILL						= source->fill;
				re2c:define:YYCTXMARKER					= marker;

				WS								 		= [ \t\v\f];
				NL								 		= [\n];
				EOF										= [\X0000];

				<NORMAL> NL								{ source->newline();		 			goto re2c_start; 					}
				<NORMAL> WS								{ 										goto re2c_start; 					}
				<NORMAL> EOF							{ ret = T_EOF; 							goto re2c_finish; 					}
				<NORMAL> "include"						{ ret = T_INCLUDE;						goto re2c_finish;					}
				<NORMAL> "macros"						{ ret = T_MACROS; _in_macro = true;		goto re2c_finish;					}
				<NORMAL> "objects"						{ ret = T_OBJECTS;						goto re2c_finish;					}
				<NORMAL> "query"						{ ret = T_QUERY;						goto re2c_finish;					}
				<NORMAL> "show"							{ ret = T_SHOW;							goto re2c_finish;					}
				<NORMAL> "sorts"						{ ret = T_SORTS;						goto re2c_finish;					}
				<NORMAL> "variables"					{ ret = T_VARIABLES;					goto re2c_finish;					}
				<NORMAL> "abAction"						{ ret = T_ABACTION;						goto re2c_finish;					}
				<NORMAL> "action"						{ ret = T_ACTION;						goto re2c_finish;					}
				<NORMAL> "additiveAction"				{ ret = T_ADDITIVEACTION;				goto re2c_finish;					}
				<NORMAL> "additiveFluent"				{ ret = T_ADDITIVEFLUENT;				goto re2c_finish;					}
				<NORMAL> "after"						{ ret = T_AFTER;						goto re2c_finish;					}
				<NORMAL> "always"						{ ret = T_ALWAYS;						goto re2c_finish;					}
				<NORMAL> "assuming"						{ ret = T_ASSUMING;						goto re2c_finish;					}
				<NORMAL> "attribute"					{ ret = T_ATTRIBUTE;					goto re2c_finish;					}
				<NORMAL> "all"							{ ret = T_ALL;							goto re2c_finish;					}
				<NORMAL> "by"							{ ret = T_BY;							goto re2c_finish;					}
				<NORMAL> "caused"						{ ret = T_CAUSED;						goto re2c_finish;					}
				<NORMAL> "causes"						{ ret = T_CAUSES;						goto re2c_finish;					}
				<NORMAL> "constants"					{ ret = T_CONSTANTS;					goto re2c_finish;					}
				<NORMAL> "constraint"					{ ret = T_CONSTRAINT;					goto re2c_finish;					}
				<NORMAL> "decrements"					{ ret = T_DECREMENTS;					goto re2c_finish;					}
				<NORMAL> "default"						{ ret = T_DEFAULT;						goto re2c_finish;					}
				<NORMAL> "externalAction"				{ ret = T_EXTERNALACTION;				goto re2c_finish;					}
				<NORMAL> "externalFluent"				{ ret = T_EXTERNALFLUENT;				goto re2c_finish;					}
				<NORMAL> "exogenous"					{ ret = T_EXOGENOUS;					goto re2c_finish;					}
				<NORMAL> "exogenousAction"				{ ret = T_EXOGENOUSACTION;				goto re2c_finish;					}
				<NORMAL> "if"							{ ret = T_IF;							goto re2c_finish;					}
				<NORMAL> "ifcons"						{ ret = T_IFCONS;						goto re2c_finish;					}
				<NORMAL> "impossible"					{ ret = T_IMPOSSIBLE;					goto re2c_finish;					}
				<NORMAL> "increments"					{ ret = T_INCREMENTS;					goto re2c_finish;					}
				<NORMAL> "inertial"						{ ret = T_INERTIAL;						goto re2c_finish;					}
				<NORMAL> "inertialFluent"				{ ret = T_INERTIALFLUENT;				goto re2c_finish;					}
				<NORMAL> "label"						{ ret = T_LABEL;						goto re2c_finish;					}
				<NORMAL> "may" WS+ "cause"				{ ret = T_MAY_CAUSE;					goto re2c_finish;					}
				<NORMAL> "maxAdditive"					{ ret = T_MAXADDITIVE;					goto re2c_finish;					}
				<NORMAL> "maxAFValue"					{ ret = T_MAXAFVALUE;					goto re2c_finish;					}
				<NORMAL> "maxstep"						{ ret = T_MAXSTEP;						goto re2c_finish;					}
				<NORMAL> "never"						{ ret = T_NEVER;						goto re2c_finish;					}
				<NORMAL> "noconcurrency"				{ ret = T_NOCONCURRENCY;				goto re2c_finish;					}
				<NORMAL> "nonexecutable"				{ ret = T_NONEXECUTABLE;				goto re2c_finish;					}
				<NORMAL> "of"							{ ret = T_OF;							goto re2c_finish;					}
				<NORMAL> "possibly" WS+ "caused"		{ ret = T_POSSIBLY_CAUSED;				goto re2c_finish;					}
				<NORMAL> "rigid"						{ ret = T_RIGID;						goto re2c_finish;					}
				<NORMAL> "sdFluent"						{ ret = T_SDFLUENT;						goto re2c_finish;					}
				<NORMAL> "simpleFluent"					{ ret = T_SIMPLEFLUENT;					goto re2c_finish;					}
				<NORMAL> "strong" WS+ "noconcurrency"	{ ret = T_STRONG_NOCONCURRENCY;			goto re2c_finish;					}
				<NORMAL> "strong_noconcurrency"			{ ret = T_STRONG_NOCONCURRENCY;			goto re2c_finish;					}
				<NORMAL> "nonexecutable"				{ ret = T_NONEXECUTABLE;				goto re2c_finish;					}
				<NORMAL> "of"							{ ret = T_OF;							goto re2c_finish;					}
				<NORMAL> "unless"						{ ret = T_UNLESS;						goto re2c_finish;					}
				<NORMAL> "where"						{ ret = T_WHERE;						goto re2c_finish;					}
				<NORMAL> "abs"							{ ret = T_ABS;							goto re2c_finish;					}
				<NORMAL> "eq"							{ ret = T_EQ;							goto re2c_finish;					}
				<NORMAL> "false"						{ ret = T_FALSE;						goto re2c_finish;					}
				<NORMAL> "mod"							{ ret = T_MOD;							goto re2c_finish;					}
				<NORMAL> "neq"							{ ret = T_NEQ;							goto re2c_finish;					}
				<NORMAL> "none"							{ ret = T_NONE;							goto re2c_finish;					}
				<NORMAL> "not"							{ ret = T_NOT;							goto re2c_finish;					}
				<NORMAL> "true"							{ ret = T_TRUE;							goto re2c_finish;					}

				<*> .									{ goto re2c_notkw; }

			*/
	}
re2c_notkw:
	source->cursor() = source->token();
	return tokenize_notkw(source);

re2c_finish:
	u::ref_ptr<ReferencedString> str = new ReferencedString();
	if (ret != T_EOF) {
		str->assign(source->token(), (size_t)(source->cursor() - source->token()));
	} else {
		str->assign("<EOF>");
	}

	return new Token(ret, str, begin, source->loc());
}

void Scanner::close() {
	_sources.clear();
}



}}}
