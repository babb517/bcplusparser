
#include <ostream>

#include "bcplus/DomainType.h"
#include "bcplus/symbols/Resolver.h"
#include "bcplus/symbols/Symbol.h"
#include "bcplus/symbols/detail/BaseSymbol.h"
#include "bcplus/symbols/ConstantSymbol.h"
#include "bcplus/symbols/SortSymbol.h"


namespace bcplus {
namespace symbols {

char const* ConstantSymbol::Type::cstr(type val) {
	switch (val) {
		case ABACTION:					return "abAction";
		case ACTION:					return "action";
		case ADDITIVEFLUENT:			return "additiveFluent";
		case ADDITIVEACTION:			return "additiveAction";
		case ATTRIBUTE:					return "attribute";
		case EXTERNALACTION:			return "externalAction";
		case EXTERNALFLUENT:			return "externalFluent";
		case EXOGENOUSACTION:			return "exogenousAction";
		case INERTIALFLUENT:			return "inertialFluent";
		case RIGID:						return "rigid";
		case SDFLUENT:					return "sdFluent";
		case SIMPLEFLUENT:				return "simpleFluent";
		default:						return "<unknown_type>";
	}

}

ConstantSymbol::Type::type ConstantSymbol::Type::value(char const* str) {
	char const* marker;
	/*!re2c
        re2c:define:YYCTYPE = "char";
        re2c:define:YYCURSOR = str;
        re2c:yyfill:enable = 0;
        re2c:define:YYMARKER = marker;
        re2c:indent:top = 1;

        'abAction'				{ return ABACTION; }
        'action'				{ return ACTION; }
        'additiveFluent'		{ return ADDITIVEFLUENT; }
        'additiveAction'		{ return ADDITIVEACTION; }
        'attribute'				{ return ATTRIBUTE; }
        'externalAction'		{ return EXTERNALACTION; }
        'externalFluent'		{ return EXTERNALFLUENT; }
        'exogenousAction'		{ return EXOGENOUSACTION; }
        'inertialFluent'		{ return INERTIALFLUENT; }
        'rigid'					{ return RIGID; }
        'sdFluent'				{ return SDFLUENT; }
        'simpleFluent'			{ return SIMPLEFLUENT; }
        .                  		{ return ERR_UNKNOWN; }

	*/

}



ConstantSymbol::ConstantSymbol(Type::type type, ReferencedString const* base, SortSymbol const* sort, SortList const* args) 
	: BaseSymbol(Symbol::Type::CONSTANT, base, args) , _sort(sort), _type(type) {
	// intentionally left blank
}

ConstantSymbol::ConstantSymbol(boost::property_tree::ptree const& node, Resolver const* resolver, std::ostream* err)
	: BaseSymbol(Symbol::Type::CONSTANT, node, resolver, err) {

	try {
		std::string sort_name = node.get<std::string>("<xmlattr>.sort");
		SortSymbol const* sort = (SortSymbol const*)resolver->resolve(Symbol::Type::SORT, sort_name);
		if (!sort) {
			good(false);
			if (err) *err << "ERROR: An error occurred while scanning the definition of \"" << *name() << "\". \"" << sort_name << "\" is not a valid sort." << std::endl;
		} else {
			_sort = sort;
		}



	} catch (boost::property_tree::ptree_error& e) {
		good(false);
		if (err) *err << "ERROR: An error occurred while scanning the definition of \"" << *name() << "\". Expected a 'sort' attribute declaring the constant's sort." << std::endl;
	}

	try {

		std::string type_name = node.get<std::string>("<xmlattr>.type");
		Type::type t = Type::value(type_name.c_str());

		if (t == Type::ERR_UNKNOWN) {
			good(false);
			if (err) *err << "ERROR: An error occurred while scanning the definition of \"" << *name() << "\". Encoutered an unknown type specifier \"" << type_name << "\"." << std::endl;

		} else _type = t;


	} catch (boost::property_tree::ptree_error& e) {
		good(false);
		if (err) *err << "ERROR: An error occurred while scanning the definition of \"" << *name() << "\". Expected a 'type' attribute declaring the constant's type." << std::endl;
	}


}

ConstantSymbol::~ConstantSymbol() {
	// Intentionally left blank
}


DomainType::type ConstantSymbol::domainType() const {
	return _sort->domainType();
}

bool ConstantSymbol::operator==(Symbol const& other) const {
	if (!BaseSymbol::operator==(other)) return false;
	ConstantSymbol const& o = (ConstantSymbol const&)other;

	// ensure the sort is the same
	if (sort() != o.sort()) return false;
	return true;
}


void ConstantSymbol::save(boost::property_tree::ptree& node) const {
	BaseSymbol::save(node);
	node.put("<xmlattr>.sort", *_sort->base());
	node.put("<xmlattr>.type", constTypeString());
}

}}

